#!/usr/bin/env texlua
kpse.set_program_name "luatex"

local pl = require "penlight"
local utils = require "pl.utils"
local path = pl.path


logging = require("luaxake-logging")


local log = logging.new("luaxake")
logging.set_outfile("luaxake.log")     -- better make a logfile per day ... ?
local lapp = require "lapp-mk4"
local version = "{{version}}"

local option_text = [[ 
Luaxake: build system for Ximera documents
Usage: 
$ texlua luaxake [command dirs] 

Options: 
-c,--config  (default ximera.cfg)  TeX4ht config file
-h,--help                          Print help message
-l,--loglevel (default status)     Set log level.
                                   possible values: debug, info, status, warning, error, fatal
-s,--settings  (default none)      Luaxake settings script
-v,--version                       Version info
-f,--force                         Recompile anyway
-C,--compile   (default none)            Compile sequence (default 'pdf,html', or set in config)
]]

-- REMOVED: <dir>  (table)                 Document root directory
--- @class args
--- @field config    string   TeX4ht config file
--- @field help      boolean  Print help message
--- @field settings  string   Luaxake settings script
--- @field loglevel  string   Logging level
--- @field version   boolean  Print version
--- @field command   string   Command to execute
--- @field dir       table    Document root directory
local args = lapp(option_text)

if args.version then
  print("Luaxake version: " .. (version == "{{version}}" and "devel" or version))
  os.exit()
end

logging.set_level(args.loglevel)

-- first real argument is the command (bake/frost/serve/...)
local command = table.remove(args, 1)

if not command then
  log:error("Usage: script [command] <files-or-folders...>")
  os.exit(1)
end

log:debug("command: "..command)

 
-- all further arguments are considered dirs/files to be processed
local dirs = {}

for i, value in ipairs(args) do
    log:debug("Adding file/dir "..value)
    table.insert(dirs, value)
end

if #dirs == 0 then
  log:debug("Using root folder . as default argument/target")
  dirs = {"."}
end

--- @class DOM_Object 
--- Dummy type declaration for LuaXML DOM object, to prevent error messages from language server
--- @field query_selector function get all elements that match a given CSS selector
--- @field get_children function 
--- @field get_text function 
--- @field get_attribute function
--- @field remove_node function

--- @class compiler 
--- @field command string command template
--- @field check_log? boolean should we check the log file for errors?
--- @field check_file? boolean execute command only if the output file exists
--- @field status? number expected status code from the command
--- @field process_html? boolean run HTML post-processing

--- @class config
--- @field output_formats [string] list of output format extensions
--- @field documentclass_lines number on how many lines in TeX files we should try to look for \documentclass
--- @field compilers {string: compiler}
--- @field compile_sequence [string] sequence  of compiler names to be executed
--- @field clean [string] list of extensions of temp files to be removed after the compilation
--- @field config_file string TeX4ht config file 

config = {
  -- list of outputs ( and extensions )
  output_formats = {"html", "pdf", "handout.pdf"},
  compile_sequence = {"pdf", "html"},
  -- compile_sequence = {"pdf", "sagetex.sage", "pdf", "html"},
  compilers = {
    ddd = {
      -- this doesn't work well
      -- command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  "\\PassOptionsToClass{tikzexport}{ximera}\\PassOptionsToClass{xake}{ximera}\\PassOptionsToClass{xake}{xourse}\\nonstopmode\\input{@{filename}}"',
      -- command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  "\\PassOptionsToClass{xake}{ximera}\\PassOptionsToClass{xake}{xourse}\\input{@{filename}}"',
      command = 'date >@{basename}.ddd',     -- mmm, this increases the .jax file !!!
      check_log = false, -- check log
      status = 0, -- check that the latex command return 0
    },
    pdf = {
      -- this doesn't work well
      -- command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  "\\PassOptionsToClass{tikzexport}{ximera}\\PassOptionsToClass{xake}{ximera}\\PassOptionsToClass{xake}{xourse}\\nonstopmode\\input{@{filename}}"',
      -- command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  "\\PassOptionsToClass{xake}{ximera}\\PassOptionsToClass{xake}{xourse}\\input{@{filename}}"',
      command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  "\\input{@{filename}}"',     -- mmm, this increases the .jax file !!!
      check_log = true, -- check log
      status = 0, -- check that the latex command return 0
      extension = "pdf",
    },
    ["handout.pdf"] = {
      command = 'pdflatex -interaction=nonstopmode  -file-line-error -shell-escape  -jobname @{basename}.handout "\\PassOptionsToClass{handout}{ximera}\\PassOptionsToClass{handout}{xourse}\\input{@{filename}}"',
      check_log = true, -- check log
      status = 0, -- check that the latex command return 0
      extension = "handout.pdf",
    },
    html = {
      -- command = "make4ht -f html5+dvisvgm_hashes -c @{config_file} -sm draft @{filename}",
      -- command = "make4ht -c @{config_file} -f html5+dvisvgm_hashes -s @{make4ht_mode} -a debug @{filename} 'svg,htex4ht,mathjax,-css,info,tikz+' '' '' '--interaction=nonstopmode -shell-escape -file-line-error'",
      command = "make4ht -c @{config_file} -f html5+dvisvgm_hashes -s @{make4ht_extraoptions} @{filename} 'svg,htex4ht,mathjax,-css,info,tikz+' '' '' '--interaction=nonstopmode -shell-escape -file-line-error'",
      check_log = true, -- check log
      status = 0, -- check that the latex command return 0
      process_html = true,
      extension = "html",
    },
    ["sagetex.sage"] = {
      command = "sage @{output_file}",
      check_log = true, -- check log
      check_file = true, -- check if the sagetex.sage file exists
      status = 0, -- check that the latex command return 0
      extension = "sage",   -- ?
    },

  },
  -- used for dependency-checking in .tex files
  input_commands = {
    input=true, 
    include=true, 
    includeonly=true,
    activity=true, 
    activitychapter=true, 
    activitysection=true, 
    practicechapter=true, 
    practicesection=true, 
  }, 
  clean = {
    -- "aux",
    "4ct",
    "4tc",
    "oc",
    "md5",
    "dpth",
    "out",
    -- "jax",
    "idv",
    "lg",
    "tmp",
    -- "xref",
    -- "log",
    "auxlock",
    "dvi",
    "scmd",
    "sout",
  },
  -- make4ht_loglevel = "",
  -- make4ht_mode = "",
  make4ht_extraoptions= "",
  -- output_formats = {"html", "pdf", "sagetex.sage"},    -- TODO: check/implement sage
  -- number of lines in tex files where we should look for \documentclass
  documentclass_lines = 30,
}

-- set/add potential default dependencies
if not config.default_dependencies and path.exists("xmPreamble.tex") then
  log:info("Adding default dependency xmPreamble.tex")
  config.default_dependencies = { "xmPreamble.tex" }
end



local files   = require "luaxake-files"
local compile = require "luaxake-compile"
local frost   = require "luaxake-frost"
local html    = require "luaxake-transform-html"

config.config_file = args.config
config.force_compilation = args.force
if config.config_file ~= "ximera.cfg" then
  log:warning("Using non-default config file " .. config.config_file)
end

if args.settings ~= "none" then
  -- config file can be a Lua script, which should only set properties for the config table
  local configlib = require "luaxake-config"
  log:info("Using settings file: " .. args.settings)
  configlib.update_config(args.settings, config)
end

if args.compile ~= "none" then
  config.compile_sequence = utils.split(args.compile,',')
  config.output_formats   = utils.split(args.compile,',')
  log:info("Set compile_sequence and output_formats to " .. args.compile)
end

config.dirs = dirs

local tex_files = {}
for i,nextarg in ipairs(config.dirs) do 

  log:info("Processing argument " .. nextarg)

  local more_tex_files
  
  -- an existing TeX-file, but without the extension
  if not path.isfile(nextarg) and path.isfile(nextarg..".tex" ) then    
    log:trace("Adding .tex extension to file "..nextarg)
    nextarg = nextarg..".tex"
  end
  if path.isdir(nextarg) then
    
    more_tex_files = files.get_tex_files_with_status(nextarg, config.output_formats, config.compilers)
  elseif    ( path.isfile(nextarg) and nextarg:match("%.tex$") ~= nil   )     -- an existing TeX-file
  then
    local metadata = files.get_metadata_for_filename(nextarg)
    metadata.needs_compilation = true;
    log:debug("Explicitly adding tex file "..metadata.filename)
    more_tex_files = { metadata }
    to_be_compiled = tex_files
  elseif  nextarg:match("%.tex$") == nil then
    log:warning("File "..nextarg.." not a .tex file: SKIPPING")
  else
    log:warning("File "..nextarg.." not found: SKIPPING")
  end

  table.move(more_tex_files, 1, #more_tex_files, #tex_files+1, tex_files)
end

log:trace("Finding dependencies, and sorting files accordingly")
  local to_be_compiled = files.sort_dependencies(tex_files, config.force_compilation)
  if #to_be_compiled > 1 then
    log:info(#to_be_compiled.." files need compiling")
  end

  
  all_labels = {}

  if command == "info" then
    for i, file in ipairs(tex_files) do
      log:infof("Info for %s (%s)",file.filename,file.relative_path)
      
          local dom, msg = html.load_html(file.relative_path:gsub("tex$", "html"))
          
          file.labels = html.get_labels(dom)
          for k,v in pairs(file.labels) do all_labels[k] = ( all_labels[k] or 0) + v end
    end
    require 'pl.pretty'.dump(all_labels)
  
  end

      
      local all_statuses = {}
  -- TODO: fix commands (cfr xmlatex/xmlatex/lua)
  if command == "bake" or command == "compilePdf" or command ==  "compile" then
    log:status("Start "..command)
    if #to_be_compiled == 0 then
      log:status("Nothing to be baked")
    else
    for i, file in ipairs(to_be_compiled) do
      log:status(string.format("Compiling file %3d/%d: %s", i, #to_be_compiled, file.absolute_path))

      local statuses = compile.compile(file, config.compilers, config.compile_sequence)
      table.insert(all_statuses,statuses)
      compile.print_errors(statuses)
      compile.clean(file, config.clean)
    end

    -- filter errors out all statuses
    local errors = {}
    for _, entry in ipairs(all_statuses) do 
      for _, info in ipairs(entry) do
        log:debug("File "..(info.output_file or "UNKNOWN??") .." got status " .. (info.status or 'NIL??') )
        -- require 'pl.pretty'.dump(info)
      
        if (info.status or 0) > 0 then 
          table.insert(errors, info) 
        end 
      end
    end
    if #errors > 0 then
      log:error("Could not bake, got "..#errors.." errors")
      -- require 'pl.pretty'.dump(errors)
      os.exit(1)
    else
      log:info("Baked "..#to_be_compiled.." files without finding errors")
    end
  end
end

if command == "frost" then
  local root="."     -- frost only for root folder
  log:status("Start " .. command)
  local ret = frost.frost(root)  
  if ret > 0 then
    log:error("Frost failed:")
  end
  os.exit(ret)
end

